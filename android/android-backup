#!/usr/bin/env python3
# pylint: disable=expression-not-assigned
# pylint: disable=subprocess-run-check

import argparse
import logging
import os
import shutil
import subprocess
import sys
from datetime import date
from subprocess import DEVNULL, PIPE

from better_adb_sync.src import ADBSync

EXIT_ERROR = 1
JUNK_FILES = [
    "/DCIM/.thumbnails",
    "/Pictures/.thumbnails",
    "/Movies/.thumbnails",
]
BLACKLIST_DIR = [
    "amap", "alarms",
    "audiobooks", "backups",
    "beam", "data",
    "mipush", "notifications",
    "ringtones", "telegram",
    "tencent", "subtitles",
    "recordings", "podcasts"
]
SDCARD = "/sdcard"
TITANIUM_BACK = "Backups"


class Backup:
    delete = False
    titanium = False
    junk = False
    device_id = ""
    sync_dir = False
    dry_run = False
    debug = False
    pipe = DEVNULL
    out_dir = ""
    dir_to_sync: list[list] = []
    arg = None

    @staticmethod
    def create_parser():
        parser = argparse.ArgumentParser(description="BetterBack for android on Linux")
        parser.add_argument("-d", help="Delete file on dest", action="store_true")
        parser.add_argument("-f", help="Dirs file", metavar="FILE")
        parser.add_argument("-o", help="Outdir", metavar="OUT")
        parser.add_argument("-e", help="Get from env outdir (ADB_SYNC_DEST)", action="store_true")
        parser.add_argument("-j", help="Clean junk files", action="store_true")
        parser.add_argument("-t", help="Update titanium", action="store_true")
        parser.add_argument("-i", help="Specify device id", metavar="DEVICE_ID")
        parser.add_argument("-D", help="Debug mode", action="store_true")
        parser.add_argument("-l", help="Sync by list dir", action="store_true")
        parser.add_argument("-n", help="Dry run", action="store_true")
        return parser

    def parse_args(self):
        parser = Backup.create_parser()
        self.arg = vars(parser.parse_args())
        # if debug flag is set
        if self.arg["D"]:
            print("DEBUG IS ACTIVE")
            print("Args:", self.arg)
            self.debug = True
            self.pipe = None
        # check that at leas one output is valid
        if not (self.arg["e"] ^ bool(self.arg["o"])):
            sys.stderr.write("Both -o and -e specified or none\n")
            sys.exit(EXIT_ERROR)
        # read all arguments
        self.read_destination()
        self.read_flags()
        self.read_syncdir()

        print("Parsed Arg:", vars(self)) if self.debug else None

    def read_destination(self):
        """ read output destination folder """
        path = None
        # take path from env
        if self.arg["e"]:
            path = os.getenv("ADB_SYNC_DEST")
            if not path:
                sys.stderr.write("no env var is set\n")
                sys.exit(EXIT_ERROR)
        # take path form argument
        elif self.arg["o"]:
            path = self.arg["o"]
        # check path validity
        if path:
            path = os.path.abspath(path)
            if os.path.exists(path):
                self.out_dir = path
            else:
                sys.stderr.write("path does not exist\n")
                sys.exit(EXIT_ERROR)
        else:
            sys.stderr.write("File path error\n")
            sys.exit(EXIT_ERROR)

    def read_flags(self):
        """ read option from the passed arguments """
        self.delete = self.arg["d"]
        self.junk = self.arg["j"]
        self.titanium = self.arg["t"]
        self.sync_dir = self.arg["l"]
        self.dry_run = self.arg["n"]
        self.device_id = self.arg["i"] if self.arg["i"] else ""

    def read_syncdir(self):
        """ read file w/ folder to sync """
        if self.arg["f"]:
            with open(self.arg["f"], "r", encoding='utf-8') as f:
                for line in f.readlines():
                    dirs = line.strip().split("/")
                    self.dir_to_sync.append(dirs)
            print("Sync", self.dir_to_sync) if self.debug else None
        else:
            print("Sync all dirs") if self.debug else None

    def check_device(self):
        """ check if a device is connected """
        subprocess.run(["adb", "start-server"], stdout=DEVNULL, stderr=DEVNULL)
        out = subprocess.run(
            ["adb", "get-serialno"],
            stdout=PIPE,
            stderr=DEVNULL,
            universal_newlines=True,
        ).stdout.strip()

        if out != "":
            if self.device_id != "":
                return self.device_id in out
            else:
                return True
        else:
            return False

    def adb_shell_rm(self, cmd: str):
        """ remove folder/file from device """
        # check that is somewhat valid
        if len(cmd) < 2:
            return
        f = SDCARD + cmd
        _cmd = ["adb", "shell", "rm", "-rf", f]
        if self.dry_run:
            print(" ".join(_cmd))
        else:
            print("shell rm", f) if self.debug else None
            subprocess.run(_cmd, stdout=self.pipe)

    def del_junk(self):
        if self.junk:
            for f in JUNK_FILES:
                self.adb_shell_rm(f)

    def del_titanium(self):
        if self.check_titanium_date() or self.titanium:
            path = os.path.join(self.out_dir, TITANIUM_BACK)
            if self.dry_run:
                print("rm "+path)
            else:
                print("Removing Titanium")
                shutil.rmtree(path)
                os.mkdir(path)
                if len(self.dir_to_sync) > 0 and TITANIUM_BACK not in self.dir_to_sync:
                    self.dir_to_sync.append(TITANIUM_BACK)

    def check_titanium_date(self):
        titanium_dir = os.path.join(self.out_dir, TITANIUM_BACK)
        if not os.path.exists(titanium_dir):
            return False
        m_date = date.fromtimestamp(os.path.getmtime(titanium_dir))
        today = date.today()
        return m_date < today

    def folder_list(self):
        if not self.sync_dir:
            return

        cmd = ["adb", "shell", "ls", "/sdcard"]
        out = (
            subprocess.run(cmd, stderr=DEVNULL, stdout=PIPE, universal_newlines=True)
            .stdout.strip()
            .split("\n")
        )
        for f in out:
            if f.lower() not in BLACKLIST_DIR:
                self.dir_to_sync.append(f)

    def adb_sync(self):
        self.folder_list()
        self.del_junk()
        self.del_titanium()
        # create command
        cmd = ["", "--pull"]
        cmd.append("--del") if self.delete else None
        cmd.append("-n") if self.dry_run else None
        # either some folder or all the sdcard
        if len(self.dir_to_sync) > 0:
            self.adb_sync_folders(cmd)
        else:
            self.adb_sync_all(cmd)

    def adb_sync_all(self, cmd: list):
        self.adb_sync_folder(cmd, self.out_dir, SDCARD + "/")

    def adb_sync_folders(self, cmd: list):
        for f in self.dir_to_sync:
            local = os.path.join(self.out_dir, *f)
            remote = "/".join([SDCARD, *f, ""])
            self.adb_sync_folder(cmd, local, remote)

    def adb_sync_folder(self, _cmd: list, local: str, remote: str):
        # check if local folder exists
        if not os.path.exists(local):
            os.makedirs(local)
        # build args
        cmd = _cmd.copy()
        cmd.append(local)
        cmd.append(remote)
        # overwrite args
        sys.argv = cmd
        # if self.dry_run:
        #     print(" ".join(cmd))
        # else:
        print("running:", cmd) if self.debug else print(
            f'Pulling {self.calc_space(remote)} -> {local}'
        )
        ADBSync.main()
        logging.getLogger().handlers.clear()

    def __init__(self):
        self.parse_args()

    def calc_space(self, msg: str):
        l = 30 - len(msg)
        if (l > 0):
            return msg + (l * " ")
        else:
            return msg


def check_adb_sync():
    """ check if adb-sync is installed """
    try:
        __import__('better_adb_sync.src.ADBSync')
    except (ModuleNotFoundError, ImportError):
        print("Cannot import ADB Sync, use command below")
        print("git clone git@github.com:SelfAdjointOperator/better-adb-sync.git better_adb_sync")
        sys.exit(1)


if __name__ == "__main__":
    check_adb_sync()
    try:
        backup = Backup()
        if not backup.check_device():
            sys.stderr.write("No device connected\n")
            sys.exit(EXIT_ERROR)
        print("#" * 20) if backup.debug else None
        backup.adb_sync()
    except KeyboardInterrupt:
        print("Stopping")
        sys.exit(EXIT_ERROR)
