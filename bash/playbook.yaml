---
- hosts: all
  become: true
  tasks:
    - name: Install packages
      apt:
        name: ["python3","python3-pip","python3-virtualenv","tmux","curl","sysstat","htop","git","network-manager","unzip","zip","tar"]
        state: present
        update_cache: yes
    - name: Allow root login
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^#PermitRootLogin without-password"
        line: "PermitRootLogin without-password"
    - name: Copy ssh dir
      copy:
        src: files/.ssh/
        dest: /root/.ssh
        mode: '600'
    - name: Copy ssh private key
      copy:
        src: files/id_rsa
        dest: /root/.ssh/id_rsa
        mode: '400'
    - name: Get hassio script
      get_url:
        url: "https://raw.githubusercontent.com/home-assistant/supervised-installer/master/installer.sh"
        dest: /root/hassio_installer.sh
        mode: 0744
    - name: Crate hassio script + params
      copy:
        dest: /root/install_hassio.sh
        content: "bash install_hassio -m raspberrypi3-64 -d /home/hassio"    
    - name: Clone git script
      git:
        repo: "git@github.com:rickycraft/script.git"
        dest: /root/script
    - name: Add cron path
      cron:
        name: PATH
        env: yes
        job: "/bin:/usr/bin:/sbin:/root/script/hassio:/root/script/bash"
    - name: Cron
      cron:
        name: "Cron {{ item.file }}"
        job: "{{ item.file }}"
        minute: "0"
        hour: "{{ item.hour }}"
        weekday: "{{ item.weekday }}"
      loop:
      - { file: "ha-backup", hour: "3", weekday: "*"}
      - { file: "nginx-backup", hour: "4", weekday: "1"}
      - { file: "bot-backup", hour: "4", weekday: "*"}
    - name: Generate locales
      community.general.locale_gen:
        name: "{{ item }}"
        state: present
      loop: ["it_IT.UTF-8", "en_US.UTF-8"]
    - name: Set timezone
      community.general.timezone:
        name: "Europe/Rome"
  # Install docker
    - name: Install docker required system packages
      apt:
        name: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common']
    - name: Add Docker GPG apt Key
      apt_key:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        state: present
    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present
        filename: docker
    - name: Install docker packages
      apt:
        name: [ "docker-ce", "docker-ce-cli", "curl", "containerd.io"]
    - name: Install docker-compose
      pip:
        name: docker-compose
    # Install pill-bot
    - name: Copy pill-bot repo
      git:
        repo: "git@github.com:rickycraft/telegram_pill_bot.git"
        dest: /root/telegram_pill_bot
    - name: Copy pill-bot files
      copy:
        src: "files/{{ item }}"
        dest: "/root/telegram_pill_bot/{{ item }}"
      loop: ["bot_token","db.json"]
    - name: Create virtualenv
      pip:
        requirements: /root/telegram_pill_bot/install/requirements.txt
        virtualenv: /root/telegram_pill_bot/env
        virtualenv_python: 3.9
    - name: Install pill-bot service
      copy:
        src: /root/telegram_pill_bot/install/pill-bot.service
        dest: /etc/systemd/system/pill-bot.service
        remote_src: true
    - name: Start the service
      systemd:
        daemon_reload: true
        name: pill-bot.service
        enabled: true
    # Install nginx-proxy-manager
    - name: Copy nginx files
      unarchive:
        src: files/nginx.tar
        dest: /root
    - name: Install nginx service
      copy:
        src: /root/nginx/nginx-proxy-manager.service
        dest: /etc/systemd/system/nginx-proxy-manager.service
        remote_src: true
    - name: Enable nginx service
      systemd:
        daemon_reload: true
        name: nginx-proxy-manager.service
        enabled: true
    # Create swapfile
    - name: Check swap file
      stat:
        path: /swapfile
      register: swap_check
    - name: Create wap
      command: fallocate -l 2G /swapfile
      when: not swap_check.stat.exists
    - name: Set swap permission
      file:
        path: /swapfile
        mode: "0600"
    - name: Format swap
      command: mkswap /swapfile
      when: not swap_check.stat.exists
    - name: Write swap entry in fstab
      mount: 
        name: none
        src: /swapfile
        fstype: swap
        opts: sw
        passno: 0
        dump: 0
        state: present
    - name: Turn on swap 
      command: swapon -a
      when: not swap_check.stat.exists
    - name: Set swappiness
      lineinfile:
        path: "/etc/sysctl.conf"
        line: "vm.swappiness=20"

  # Handlers
  handlers:
        